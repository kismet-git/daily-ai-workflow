import { type NextRequest, NextResponse } from "next/server"
import { createWorkflow } from "@/lib/airtable"
import { checkRateLimit, sanitizeInput } from "@/lib/security"
import OpenAI from "openai"
import { base } from "@/lib/airtable"

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

const pickTopic = async (): Promise<string> => {
  try {
    if (!base) {
      console.warn("Airtable not configured, using fallback topic")
      return "AI email segmentation"
    }

    const records = await base("Backlog")
      .select({
        view: "Unused",
        maxRecords: 1,
        sort: [{ field: "priority", direction: "desc" }],
      })
      .firstPage()

    if (!records.length) return "AI email segmentation"

    const record = records[0]
    await base("Backlog").update([{ id: record.id, fields: { used: true } }])

    return sanitizeInput(record.get("topic") as string)
  } catch (error) {
    console.error("Error picking topic:", error)
    return "AI email segmentation"
  }
}

const generateWorkflowContent = async (topic: string) => {
  const prompt = `Create a comprehensive AI marketing workflow based on the topic: "${topic}".

Return ONLY valid JSON with these exact keys:
{
  "title": "Compelling workflow title (max 80 chars)",
  "summary": "Clear 2-sentence description of what this workflow does and its main benefit",
  "tags": ["tag1", "tag2", "tag3"],
  "why": "2-3 sentences explaining why this matters now and the problem it solves",
  "signals": "2-3 sentences about market trends and data supporting this approach",
  "opportunity": "2-3 sentences about the specific business opportunity and competitive advantage",
  "executionPlan": "4-5 bullet points with specific, actionable steps to implement this workflow",
  "marketSize": "Dollar amount or percentage representing the market opportunity (e.g., '$12.8B', '40% of marketers')",
  "executionScore": 8.5,
  "ctaLabel": "Get This Workflow",
  "difficulty": "Beginner|Intermediate|Advanced",
  "timeToComplete": "2-3 hours",
  "impact": "+40% Conversion Rate"
}

Guidelines:
- Target audience: Non-technical marketers aged 35-55
- Tone: Clear, confident, Jason Fried style (simple, direct, no fluff)
- Focus on practical, implementable strategies
- Include specific metrics and benefits
- Make it actionable within the stated timeframe`

  try {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error("OpenAI API key not configured")
    }

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      response_format: { type: "json_object" },
      temperature: 0.7,
      max_tokens: 1500,
    })

    const content = completion.choices[0].message.content
    if (!content) {
      throw new Error("No content generated by OpenAI")
    }

    const data = JSON.parse(content)

    const requiredFields = ["title", "summary", "tags", "why", "signals", "opportunity", "executionPlan"]
    for (const field of requiredFields) {
      if (!data[field]) {
        throw new Error(`Missing required field: ${field}`)
      }
      if (typeof data[field] === "string") {
        data[field] = sanitizeInput(data[field])
      }
    }

    return data
  } catch (error) {
    console.error("Error generating workflow content:", error)
    throw error
  }
}

export async function GET(request: NextRequest) {
  try {
    const clientIP = request.ip || "unknown"
    if (!checkRateLimit(`cron-${clientIP}`, 5, 60000)) {
      return NextResponse.json({ error: "Rate limit exceeded" }, { status: 429 })
    }

    console.log("Starting daily workflow generation...")

    // Check if we have the minimum required environment variables
    if (!process.env.OPENAI_API_KEY) {
      console.error("Missing OpenAI API key")
      return NextResponse.json({ error: "OpenAI API key not configured" }, { status: 500 })
    }

    const topic = await pickTopic()
    console.log("Selected topic:", topic)

    const workflowData = await generateWorkflowContent(topic)
    console.log("Generated workflow:", workflowData.title)

    const completeWorkflowData = {
      ...workflowData,
      featured: true,
      source: "automated",
      generatedTopic: topic,
      publishedAt: new Date().toISOString(),
    }

    // Only try to save to Airtable if it's configured
    if (base) {
      try {
        await createWorkflow(completeWorkflowData)
        console.log("Workflow saved to Airtable")
      } catch (error) {
        console.error("Failed to save to Airtable:", error)
        // Continue without failing the entire request
      }
    } else {
      console.warn("Airtable not configured, skipping database save")
    }

    // Try to revalidate cache if configured
    if (process.env.VERCEL_URL && process.env.REVALIDATE_SECRET) {
      try {
        const revalidateUrl = `${process.env.VERCEL_URL}/api/revalidate?tag=${process.env.SITE_REVALIDATE_TAG || "home"}`
        const revalidateResponse = await fetch(revalidateUrl, {
          method: "POST",
          headers: {
            "x-vercel-revalidate-secret": process.env.REVALIDATE_SECRET,
            "Content-Type": "application/json",
          },
        })

        if (revalidateResponse.ok) {
          console.log("Homepage cache invalidated successfully")
        } else {
          console.error("Failed to invalidate cache:", await revalidateResponse.text())
        }
      } catch (error) {
        console.error("Error revalidating cache:", error)
        // Continue without failing
      }
    }

    return NextResponse.json({
      success: true,
      workflow: workflowData.title,
      topic,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error("Error in daily workflow generation:", error)
    return NextResponse.json(
      {
        error: "Failed to generate daily workflow",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
