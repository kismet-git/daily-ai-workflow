import { createWorkflow } from "@/lib/airtable"
import OpenAI from "openai"
import { base } from "@/lib/airtable"

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

async function pickTopic(): Promise<string> {
  // 1️⃣  Get first unused topic from Backlog → Unused view
  const records = await base("Backlog").select({ view: "Unused", maxRecords: 1 }).firstPage()

  // Fallback if Backlog is empty
  if (!records.length) return "AI email segmentation"

  // 2️⃣  Mark topic as used so it won't repeat
  const record = records[0]
  await record.update({ used: true })

  // 3️⃣  Return topic string
  return record.get("topic") as string
}

async function generateWorkflowContent(topic: string) {
  const prompt = `Create a comprehensive AI marketing workflow based on the topic: "${topic}".

Return ONLY valid JSON with these exact keys:
{
  "title": "Compelling workflow title (max 80 chars)",
  "summary": "Clear 2-sentence description of what this workflow does and its main benefit",
  "tags": ["tag1", "tag2", "tag3"],
  "why": "2-3 sentences explaining why this matters now and the problem it solves",
  "signals": "2-3 sentences about market trends and data supporting this approach",
  "opportunity": "2-3 sentences about the specific business opportunity and competitive advantage",
  "executionPlan": "4-5 bullet points with specific, actionable steps to implement this workflow",
  "marketSize": "Dollar amount or percentage representing the market opportunity (e.g., '$12.8B', '40% of marketers')",
  "executionScore": 8.5,
  "ctaLabel": "Get This Workflow",
  "difficulty": "Beginner|Intermediate|Advanced",
  "timeToComplete": "2-3 hours",
  "impact": "+40% Conversion Rate"
}

Guidelines:
- Target audience: Non-technical marketers aged 35-55
- Tone: Clear, confident, Jason Fried style (simple, direct, no fluff)
- Focus on practical, implementable strategies
- Include specific metrics and benefits
- Make it actionable within the stated timeframe`

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      response_format: { type: "json_object" },
      temperature: 0.7,
      max_tokens: 1500,
    })

    const content = completion.choices[0].message.content
    if (!content) {
      throw new Error("No content generated by OpenAI")
    }

    const data = JSON.parse(content)

    // Validate required fields
    const requiredFields = ["title", "summary", "tags", "why", "signals", "opportunity", "executionPlan"]
    for (const field of requiredFields) {
      if (!data[field]) {
        throw new Error(`Missing required field: ${field}`)
      }
    }

    return data
  } catch (error) {
    console.error("Error generating workflow content:", error)
    throw error
  }
}

export default async function handler() {
  try {
    console.log("Starting daily workflow generation...")

    // Pick a trending topic
    const topic = await pickTopic()
    console.log("Selected topic:", topic)

    // Generate workflow content
    const workflowData = await generateWorkflowContent(topic)
    console.log("Generated workflow:", workflowData.title)

    // Add metadata
    const completeWorkflowData = {
      ...workflowData,
      featured: true,
      source: "automated",
      generatedTopic: topic,
      publishedAt: new Date().toISOString(),
    }

    // Save to Airtable
    await createWorkflow(completeWorkflowData)
    console.log("Workflow saved to Airtable")

    // Invalidate homepage cache
    const revalidateUrl = `${process.env.VERCEL_URL}/api/revalidate?tag=${process.env.SITE_REVALIDATE_TAG}`
    const revalidateResponse = await fetch(revalidateUrl, {
      method: "POST",
      headers: {
        "x-vercel-revalidate-secret": process.env.REVALIDATE_SECRET!,
        "Content-Type": "application/json",
      },
    })

    if (revalidateResponse.ok) {
      console.log("Homepage cache invalidated successfully")
    } else {
      console.error("Failed to invalidate cache:", await revalidateResponse.text())
    }

    return {
      success: true,
      workflow: workflowData.title,
      topic,
      timestamp: new Date().toISOString(),
    }
  } catch (error) {
    console.error("Error in daily workflow generation:", error)
    throw error
  }
}

// Vercel Cron configuration
export const config = {
  schedule: "0 9 * * *", // Run daily at 09:00 UTC
}
